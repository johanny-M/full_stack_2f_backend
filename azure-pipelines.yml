trigger:
- main

pool: 'my-personal-computer'

steps:
# Checkout the repository code
- checkout: self

# Check if git is available
- script: |
    git --version
  displayName: 'Check Git Version'

# Set the CommitHash (full commit hash)
- script: |
    echo "##vso[task.setvariable variable=CommitHash]$(git rev-parse HEAD)"  # Full commit hash
  displayName: 'Set Full Commit Hash Variable'

# Verify that CommitHash is set correctly
- script: |
    echo "CommitHash is: $(CommitHash)"
  displayName: 'Verify CommitHash'

# Optional: Shorten the commit hash (first 4 characters)
- script: |
    echo "##vso[task.setvariable variable=CommitHash]$(echo $(git rev-parse HEAD) | cut -c 1-4)"
  displayName: 'Set Short Commit Hash Variable'

# Fallback to latest if CommitHash is not set
- script: |
    if [ -z "$(CommitHash)" ]; then
      echo "##vso[task.setvariable variable=CommitHash]latest"
    fi
  displayName: 'Fallback to latest if CommitHash is not set'

# Build the Docker image and tag it with the commit hash
- task: Docker@2
  inputs:
    command: 'build'
    repository: 'johannyet/full_stack_2f_backend'  
    Dockerfile: '$(Build.ArtifactStagingDirectory)/main/Dockerfile'
    tags: '$(CommitHash)'  # Use the captured CommitHash as the tag

# Push the Docker image to Docker Hub
- task: Docker@2
  inputs:
    command: 'push'
    repository: 'johannyet/full_stack_2f_backend'
    tags: '$(CommitHash)'  # Push the image tagged with the commit hash

# SSH into Docker Swarm manager and update the service
- task: SSH@0
  inputs:
    sshEndpoint: 'deploy'
    runOptions: 'inline'
    inline: |
      docker pull johannyet/full_stack_2f_backend:$(CommitHash)
      docker service update --image johannyet/full_stack_2f_backend:$(CommitHash) your_service_name
